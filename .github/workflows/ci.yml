name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5433:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: cocktails-ci
          PGDATA: /data/postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: 'postgresql://user:password@localhost:5432/cocktails-ci'

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: nrwl/nx-set-shas@v3

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: |
          npm install nx
          npm ci

      - run: npm run db:push

      - name: Run API tests
        run: npx nx run api:test

      - name: Upload api coverage reports to codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: api
          files: ./coverage/apps/api/coverage-final.json

      - name: Notify build status
        if: always() # Notify even if previous steps fail
        run: echo "Build ${{ job.status }}" # Add notification step


      # - name: Run Client tests
      #   run: npx nx run client:test --coverage --verbose

      # - name: Upload client coverage reports to codecov
      #   uses: codecov/codecov-action@v2
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     flags: client
      #     files: ./coverage/apps/client/coverage-final.json
